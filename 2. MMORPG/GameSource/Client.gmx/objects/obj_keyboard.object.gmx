<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables
response = -1;
type = 0;
can_change_kor = true;
can_space = true;
can_change_other = true;
// 1이면 보내기 끝냈을때, 자신 삭제

display_set_gui_size(800, 450);
vmKey_init();
kor_initialize();

send_it = false;
_str = "";
_str2 = "";
eng_low = vmKey_addVm();
eng_up = vmKey_addVm();
symbol1 = vmKey_addVm();
symbol2 = vmKey_addVm();
kor_low = vmKey_addVm();
kor_up = vmKey_addVm();

key = kor_low;

target_ypos = 450-60*4;
xpos = 0;
ypos = 480;

kfw = 120
kfh = 60

knw = 80
knh = 60

ksw = 360
ksh = 60

kew = 120
keh = 60

for(var i=0;i&lt;32;i++){
if vmKey_eng_getCode_lower(i) != -1{
vmKey_addKey(eng_low,i,vmKey_eng_getCode_lower(i));
vmKey_addKey(eng_up,i,vmKey_eng_getCode_upper(i));
vmKey_addKey(kor_low,i,vmKey_kor_getCode_lower(i));
vmKey_addKey(kor_up,i,vmKey_kor_getCode_upper(i));
vmKey_addKey(symbol1,i,vmKey_sym_getCode(i));
vmKey_addKey(symbol2,i,vmKey_sym_getCode2(i));
}
else{
switch i{
case 19:
vmKey_addKey(eng_low,i,-1);//upper
vmKey_addKey(eng_up,i,-1);//lower
vmKey_addKey(kor_low,i,-1);
vmKey_addKey(kor_up,i,-1);
vmKey_addKey(symbol1,i,-1);//another symbol
vmKey_addKey(symbol2,i,-1);
break;
case 27:
vmKey_addKey(eng_low,i,-2);//symbol
vmKey_addKey(eng_up,i,-2);
vmKey_addKey(kor_low,i,-2);
vmKey_addKey(kor_up,i,-2);
vmKey_addKey(symbol1,i,-2);//english
vmKey_addKey(symbol2,i,-2);
break;
case 28:
vmKey_addKey(eng_low,i,-3);//korean
vmKey_addKey(eng_up,i,-3);
vmKey_addKey(kor_low,i,-3);
vmKey_addKey(kor_up,i,-3);
vmKey_addKey(symbol1,i,-3);//english
vmKey_addKey(symbol2,i,-3);
break;
case 29:
vmKey_addKey(eng_low,i,ord('?'));
vmKey_addKey(eng_up,i,ord('?'));
vmKey_addKey(kor_low,i,ord('?'));
vmKey_addKey(kor_up,i,ord('?'));
vmKey_addKey(symbol1,i,ord(','));
vmKey_addKey(symbol2,i,ord(','));
break;
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_keyboard_eff</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clicked check
var fff;
for(fff = 0; fff &lt; 4; fff++)
{
    draw_set_font(font_keyboard_string);
    if(string_width(vmKey_getFullstring(_str)) &lt; 330)
    {
    for(var i=0;i&lt;32;i++){
    if vmKey_getLineY(i)==0{
    if device_mouse_check_button_released(fff, mb_left) &amp;&amp; vmKey_getMouseIn(xpos+vmKey_getLineX(i)*knw,ypos+vmKey_getLineY(i)*knh,xpos+vmKey_getLineX(i)*knw+knw,ypos+vmKey_getLineY(i)*knh+knh, fff){
    
    var ins = instance_create(xpos+vmKey_getLineX(i)*knw, ypos+vmKey_getLineY(i)*knh, obj_keyboard_eff);
    
    if key!=kor_low &amp;&amp; key!=kor_up{
    ins.text =chr(vmKey_getCode(key,i));
    _str+=chr(vmKey_getCode(key,i));
    }
    else{
    if key == kor_low{
    if string_letters(chr(vmKey_getCode(eng_low,i)))!=""{
    ins.text =chr(vmKey_getCode(kor_low,i));
    _str+=kor_input(chr(vmKey_getCode(eng_low,i)));
    }
    else if chr(vmKey_getCode(eng_low,i))!=""{
    ins.text =chr(vmKey_getCode(kor_low,i));
    _str+=kor_load()+chr(vmKey_getCode(eng_low,i));
    kor_reset();
    }
    }
    else{
    if string_letters(chr(vmKey_getCode(eng_up,i)))!=""{
    ins.text = chr(vmKey_getCode(eng_up,i));
    _str+=kor_input(chr(vmKey_getCode(eng_up,i)));
    }
    else if chr(vmKey_getCode(eng_up,i))!=""{
    ins.text = chr(vmKey_getCode(eng_up,i));
    _str+=kor_load()+chr(vmKey_getCode(eng_up,i));
    kor_reset();
    }
    }
    }
    
    }
    }
    
    else if vmKey_getLineY(i)==1{
    if device_mouse_check_button_released(fff, mb_left) &amp;&amp; vmKey_getMouseIn(xpos+knw*10/2-(knw*9)/2+vmKey_getLineX(i)*knw,ypos+vmKey_getLineY(i)*knh,xpos+knw*10/2-(knw*9)/2+vmKey_getLineX(i)*knw+knw,ypos+vmKey_getLineY(i)*knh+knh, fff){
    
    var ins = instance_create(xpos+knw*10/2-(knw*9)/2+vmKey_getLineX(i)*knw, ypos+vmKey_getLineY(i)*knh, obj_keyboard_eff)
    
    if key!=kor_low &amp;&amp; key!=kor_up{
    ins.text = chr(vmKey_getCode(key,i));
    _str+=chr(vmKey_getCode(key,i));
    }
    else{
    if key == kor_low{
    if string_letters(chr(vmKey_getCode(eng_low,i)))!=""{
    ins.text = chr(vmKey_getCode(kor_low,i))
    _str+=kor_input(chr(vmKey_getCode(eng_low,i)));
    }
    else if chr(vmKey_getCode(eng_low,i))!=""{
    ins.text = chr(vmKey_getCode(kor_low,i));
    _str+=kor_load()+chr(vmKey_getCode(eng_low,i));
    kor_reset();
    }
    }
    else{
    if string_letters(chr(vmKey_getCode(eng_up,i)))!=""{
    ins.text = chr(vmKey_getCode(eng_up,i))
    _str+=kor_input(chr(vmKey_getCode(eng_up,i)));
    }
    else if chr(vmKey_getCode(eng_up,i))!=""{
    ins.text = chr(vmKey_getCode(eng_up,i));
    _str+=kor_load()+chr(vmKey_getCode(eng_up,i));
    kor_reset();
    }
    }
    }
    }
    }
    else if vmKey_getLineY(i)==2{
    if vmKey_getLineX(i)==0{
    if device_mouse_check_button_released(fff, mb_left) &amp;&amp; vmKey_getMouseIn(xpos,ypos+vmKey_getLineY(i)*knh,xpos+kfw,ypos+vmKey_getLineY(i)*knh+knh, fff){
    
    var ins = instance_create(xpos, ypos+vmKey_getLineY(i)*knh, obj_keyboard_eff);
    ins.x -= 10
    ins.sprite_index = sprFunctionKey
    ins.image_index = 1;
    
    if key == eng_low{
    key = eng_up;
    }
    else if key == eng_up{
    key = eng_low
    }
    else if key == symbol1{
    key = symbol2;
    }
    else if key == symbol2{
    key = symbol1
    }
    else if key == kor_low{
    key = kor_up;
    }
    else if key == kor_up{
    key = kor_low
    }
    }
    //대소문자 변경키
    }
    else{
    if device_mouse_check_button_released(fff, mb_left) &amp;&amp; vmKey_getMouseIn(xpos+kfw+(vmKey_getLineX(i)-1)*knw,ypos+vmKey_getLineY(i)*knh,xpos+kfw+(vmKey_getLineX(i)-1)*knw+knw,ypos+vmKey_getLineY(i)*knh+knh, fff){
    
    var ins = instance_create(xpos+kfw+(vmKey_getLineX(i)-1)*knw, ypos+vmKey_getLineY(i)*knh, obj_keyboard_eff);
    //ins.sprite_index = sprFunctionKey
    
    if vmKey_getCode(key,i)&gt;=0{
    if key!=kor_low &amp;&amp; key!=kor_up{
    ins.text = chr(vmKey_getCode(key,i));
    _str+=chr(vmKey_getCode(key,i));
    }
    else{
    if key == kor_low{
    if string_letters(chr(vmKey_getCode(eng_low,i)))!=""{
    ins.text = chr(vmKey_getCode(kor_low,i));
    _str+=kor_input(chr(vmKey_getCode(eng_low,i)));
    }
    else if chr(vmKey_getCode(eng_low,i))!=""{
    ins.text = chr(vmKey_getCode(kor_low,i));
    _str+=kor_load()+chr(vmKey_getCode(eng_low,i));
    kor_reset();
    }
    }
    else{
    if string_letters(chr(vmKey_getCode(eng_up,i)))!=""{
    ins.text = chr(vmKey_getCode(eng_low,i));
    _str+=kor_input(chr(vmKey_getCode(eng_up,i)));
    }
    else if chr(vmKey_getCode(eng_up,i))!=""{
    ins.text = chr(vmKey_getCode(eng_low,i));
    _str+=kor_load()+chr(vmKey_getCode(eng_up,i));
    kor_reset();
    }
    }
    }
    }
    }
    }
    }
    else if vmKey_getLineY(i)==3{
    if vmKey_getLineX(i)&lt;3{
    if device_mouse_check_button_released(fff, mb_left) &amp;&amp; vmKey_getMouseIn(xpos+vmKey_getLineX(i)*knw,ypos+vmKey_getLineY(i)*knh,xpos+vmKey_getLineX(i)*knw+knw,ypos+vmKey_getLineY(i)*knh+knh, fff){
    
    var ins = instance_create(xpos+vmKey_getLineX(i)*knw, ypos+vmKey_getLineY(i)*knh, obj_keyboard_eff);
    
    if vmKey_getLineX(i) == 0{
    if(can_change_other)
    {
    ins.image_index = 1;
    //기호, symbol
    if key == eng_up || key == eng_low{
    key = symbol1;
    }
    else if key == kor_low || key == kor_up{
    _str+=kor_load();
    kor_reset();
    key = symbol1;
    }
    else{
    key = eng_low;
    }
    }
    }
    else if vmKey_getLineX(i) == 1{
    ins.image_index = 2;
    //한/영, to korean
    if key == symbol1 || key == symbol2{
    key = eng_low;
    }
    else if key == eng_low || key == eng_up{
        if(can_change_kor)
        {
            key = kor_low
        }
        else
        {
            with(obj_keyboard_eff){if(image_index = 2){instance_destroy()}}
            key = eng_low
        }
    }
    else{
    _str+=kor_load();
    kor_reset();
    key = eng_low
    }
    }
    else{
    if key!=kor_low &amp;&amp; key!=kor_up{
    _str+=chr(vmKey_getCode(key,i));
    }
    else{
    if key == kor_low{
    if string_letters(chr(vmKey_getCode(eng_low,i)))!=""{
    _str+=kor_input(chr(vmKey_getCode(eng_low,i)));
    }
    else if chr(vmKey_getCode(eng_low,i))!=""{
    _str+=kor_load()+chr(vmKey_getCode(eng_low,i));
    kor_reset();
    }
    }
    else{
    if string_letters(chr(vmKey_getCode(eng_up,i)))!=""{
    _str+=kor_input(chr(vmKey_getCode(eng_up,i)));
    }
    else if chr(vmKey_getCode(eng_up,i))!=""{
    _str+=kor_load()+chr(vmKey_getCode(eng_up,i));
    kor_reset();
    }
    }
    }
    }
    }
    }
    
    else if vmKey_getLineX(i)==3{
    if device_mouse_check_button_released(fff, mb_left) &amp;&amp; vmKey_getMouseIn(xpos+3*knw, ypos+vmKey_getLineY(i)*knh,xpos+3*knw+ksw,ypos+vmKey_getLineY(i)*knh+knh, fff)and(can_space){
    
        var ins = instance_create(xpos+3*knw, ypos+vmKey_getLineY(i)*knh, obj_keyboard_eff);
        ins.sprite_index = sprSpaceKey;
        ins.x -= 70;
        if key!=kor_low &amp;&amp; key!=kor_up{
        _str+=chr(vmKey_getCode(key,i));
        }
        else{
        if key == kor_low{
        if string_letters(chr(vmKey_getCode(eng_low,i)))!=""{
        _str+=kor_input(chr(vmKey_getCode(eng_low,i)));
        }
        else if chr(vmKey_getCode(eng_low,i))!=""{
        _str+=kor_load()+chr(vmKey_getCode(eng_low,i));
        kor_reset();
        }
        }
        else{
        if string_letters(chr(vmKey_getCode(eng_up,i)))!=""{
        _str+=kor_input(chr(vmKey_getCode(eng_up,i)));
        }
        else if chr(vmKey_getCode(eng_up,i))!=""{
        _str+=kor_load()+chr(vmKey_getCode(eng_up,i));
        kor_reset();
        }
        }
        }
    }
    }
    else{
    if device_mouse_check_button_released(fff, mb_left) &amp;&amp; vmKey_getMouseIn(xpos+3*knw+ksw, ypos+vmKey_getLineY(i)*knh,xpos+3*knw+ksw+knw,ypos+vmKey_getLineY(i)*knh+knh, fff){
    
    var ins = instance_create(xpos+3*knw+ksw, ypos+vmKey_getLineY(i)*knh, obj_keyboard_eff)
    
    if vmKey_getCode(key,i)&gt;=0{
    if key!=kor_low &amp;&amp; key!=kor_up{
    _str+=chr(vmKey_getCode(key,i));
    }
    else{
    if key == kor_low{
    if string_letters(chr(vmKey_getCode(eng_low,i)))!=""{
    _str+=kor_input(chr(vmKey_getCode(eng_low,i)));
    }
    else if chr(vmKey_getCode(eng_low,i))!=""{
    _str+=kor_load()+chr(vmKey_getCode(eng_low,i));
    kor_reset();
    }
    }
    else{
    if string_letters(chr(vmKey_getCode(eng_up,i)))!=""{
    _str+=kor_input(chr(vmKey_getCode(eng_up,i)));
    }
    else if chr(vmKey_getCode(eng_up,i))!=""{
    _str+=kor_load()+chr(vmKey_getCode(eng_up,i));
    kor_reset();
    }
    }
    }
    }
    }
    }
    }
    }
    
    
    }
    
    if device_mouse_check_button_released(fff, mb_left){
    if vmKey_getMouseIn(xpos+knw*10-kew,ypos+knh*3,xpos+knw*10,ypos+knh*3+keh, fff){
    var ins = instance_create(xpos+knw*10-kew, ypos+knh*3, obj_keyboard_eff);
    ins.sprite_index = sprEnterKey;
    ins.x -= 10
    
    
    
    // 엔터!
    _str += kor_load()
    //_str = vmKey_getFullstring(_str)
    
    send_it = true;

    kor_reset();
    
    
    }
    if vmKey_getMouseIn(xpos+knw*10-kfw,ypos+knh*2,xpos+knw*10,ypos+knh*2+kfh, fff){
    var ins = instance_create(xpos+knw*10-kew, ypos+knh*2, obj_keyboard_eff);
    ins.sprite_index = sprFunctionKey;
    ins.image_index = 2;
    ins.x -= 10
    if kor_delete()
    _str=string_delete(_str,string_length(_str),1);
    }
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
ypos += (target_ypos - ypos)/8

_str2 = vmKey_getFullstring(_str);

if(send_it)
{
    response.text = _str2;
    if(type == 1)
        instance_destroy();
        
    send_it = false;
    _str = "";
    _str2 = "";
}else{

}

draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_black);
draw_set_alpha(0.6)
draw_rectangle(0, 0, 800, 480, false)
draw_set_alpha(0.9)
draw_rectangle(200, 155, 800 - 200, 200, false)
draw_set_alpha(1)

draw_set_color(c_white);
draw_set_font(font_keyboard_string);
draw_set_valign(fa_middle);
draw_text(210, 175+(220-195)/2, _str2);
draw_set_valign(fa_top);

draw_set_font(fnt_text);
draw_set_halign(fa_center);
draw_text(400, 5, "여기를 눌러 키보드를 끕니다");
draw_set_halign(fa_left);
draw_set_color(c_gray);

draw_set_font(font_keyboard);
draw_sprite(sprBackKeyboard, 0, 0, ypos - 10);
draw_set_halign(fa_middle);
draw_set_valign(fa_center);

for(var i=0;i&lt;32;i++){
if vmKey_getLineY(i)==0{
draw_sprite(sprNormalKey,0,xpos+vmKey_getLineX(i)*knw,ypos+vmKey_getLineY(i)*knh);
if vmKey_getCode(key,i)&gt;=0{
draw_text(xpos+vmKey_getLineX(i)*knw+knw/2,ypos+vmKey_getLineY(i)*knh+knh/2,chr(vmKey_getCode(key,i)));
}
}
else if vmKey_getLineY(i)==1{
draw_sprite(sprNormalKey,0,xpos+knw*10/2-(knw*9)/2+vmKey_getLineX(i)*knw,ypos+vmKey_getLineY(i)*knh);
if vmKey_getCode(key,i)&gt;=0{
draw_text(xpos+knw*10/2-(knw*9)/2+vmKey_getLineX(i)*knw+knw/2,ypos+vmKey_getLineY(i)*knh+knh/2,chr(vmKey_getCode(key,i)));
}
}
else if vmKey_getLineY(i)==2{
if vmKey_getLineX(i)==0{
draw_sprite(sprFunctionKey,1,xpos,ypos+vmKey_getLineY(i)*knh);
//대소문자 변경키
}
else{
draw_sprite(sprNormalKey,0,xpos+kfw+(vmKey_getLineX(i)-1)*knw,ypos+vmKey_getLineY(i)*knh);
if vmKey_getCode(key,i)&gt;=0{
draw_text(xpos+36+(vmKey_getLineX(i)-1)*knw+knw/2 + 83,ypos+vmKey_getLineY(i)*knh+knh/2,chr(vmKey_getCode(key,i)));
}
}
}
else if vmKey_getLineY(i)==3{
if vmKey_getLineX(i)&lt;3{
if vmKey_getLineX(i) == 0{
if(can_change_other)
    draw_sprite(sprNormalKey,1,xpos+vmKey_getLineX(i)*knw,ypos+vmKey_getLineY(i)*knh);
}
else if vmKey_getLineX(i) == 1{
if(can_change_kor)
    draw_sprite(sprNormalKey,2,xpos+vmKey_getLineX(i)*knw,ypos+vmKey_getLineY(i)*knh);
}
else{
draw_sprite(sprNormalKey,0,xpos+vmKey_getLineX(i)*knw,ypos+vmKey_getLineY(i)*knh);
}
if vmKey_getCode(key,i)&gt;=0{
draw_text(xpos+vmKey_getLineX(i)*knw+knw/2,ypos+vmKey_getLineY(i)*knh+knh/2,chr(vmKey_getCode(key,i)));
}
}
else if vmKey_getLineX(i)==3{
if(can_space)
    draw_sprite(sprSpaceKey,0,xpos+3*knw,ypos+vmKey_getLineY(i)*knh);
//space bar
}
else{
draw_sprite(sprNormalKey,0,xpos+3*knw+(ksw),ypos+vmKey_getLineY(i)*knh);
if vmKey_getCode(key,i)&gt;=0{
draw_text(xpos+3*knw+ksw+knw/2,ypos+vmKey_getLineY(i)*knh+knh/2,chr(vmKey_getCode(key,i)));
}
}
}
}

draw_sprite(sprEnterKey,0,xpos+knw*10-kew,ypos+knh*3);//enter key
draw_sprite(sprFunctionKey,2,xpos+knw*10-kfw,ypos+knh*2);//backspace key

//draw_rectangle(xpos,ypos,xpos+knw*10,ypos+knh*4,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
