<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
only_single();

//Set reference
application_surface_enable(false);
device_mouse_dbclick_enable(false);
randomize();

//Whether a connection (or an attempt) is active
active = false;

//Cached login info
login_uuid = "";
login_name = "";
login_id = "";

//Set ping
my_ping = current_time;
ping = current_time;

//Out ping
global.out_ping = 2000;

//Set timeout
network_set_config(network_config_connect_timeout, 200);

//Set space
space = 0;
to_space = 0;

map = "";
width = 0;
height = 0;

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect to the server

event_user(15); //Connect attempt
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect to the correct server
nn_connect("127.0.0.1", NN.port);

//Mark connection as active (or at least, actively in progress)
active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ping
var status = nn_status();
if (status == NN.status_connected){

//Construct message
var json_data = ds_map_create();
ds_map_add(json_data, "id", NN.outsig_ping);
ds_map_add(json_data, "msg", string(current_time));
var body = json_encode(json_data);
ds_map_destroy(json_data);

//Send message
nn_send_message(body);
}

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Connection check
status = nn_status();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Monitor running status

if (active) {
    //Connection successful in login room, show login
    if (room == rm_connecting) &amp;&amp; (status == NN.status_connected) &amp;&amp; (!instance_exists(obj_login)) {
        //instance_create(x, y, obj_login);
        room_goto(rm_login);
    }

    //Connection broke
    if (status == NN.status_disconnected) {
        //Connection broke while chatting, go back to login screen and ask for reconnect
        if (room != rm_connecting) {
            room_goto(rm_connecting);
        }
        active = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Receiving data

if (status == NN.status_connected) {
    while (nn_has_message()) {
        //Decode response
        var json_data = json_decode(nn_get_message());
        var message_id = ds_map_find_value(json_data, 'id');
        var message_body = ds_map_find_value(json_data, 'msg');
        ds_map_destroy(json_data);
        
        //Route between different functions
        switch (message_id) {
        
            //Login refused
            case NN.insig_login_refused:
                show_message_async(message_body);
            break;
            
            //Login accepted
            case NN.insig_login_accepted:
                json_data = json_decode(message_body);
                login_name = ds_map_find_value(json_data, 'name');
                login_uuid = ds_map_find_value(json_data, 'uuid');
                login_id = ds_map_find_value(json_data, 'id');
                ds_map_destroy(json_data);
                show_debug_message("Login OK. Your UUID is: " + login_uuid);
                room_goto(rm_main);
            break;
            
            //Another user has left
            case NN.insig_user_leave:
                json_data = json_decode(message_body);
                var user_name = ds_map_find_value(json_data, 'name');
                var user_uuid = ds_map_find_value(json_data, 'uuid');
                ds_map_destroy(json_data);
            break;
            
            //Another user has joined
            case NN.insig_user_join:
                json_data = json_decode(message_body);
                var user_name = ds_map_find_value(json_data, 'name');
                var user_uuid = ds_map_find_value(json_data, 'uuid');
                ds_map_destroy(json_data);
            break;
            
            //Ping
            case NN.insig_ping:
                my_ping = current_time;
                ping = real(message_body);
            break;
            
            //Position
            case NN.insig_user_position:
                if(login_uuid != "")
                {
                    json_data = json_decode(message_body);
                    var user_x = real(ds_map_find_value(json_data, 'x'));
                    var user_y = real(ds_map_find_value(json_data, 'y'));
                    var user_uuid = ds_map_find_value(json_data, 'uuid');
                    ds_map_destroy(json_data);
                    
                    var check = true;
                    with(obj_client){
                        if(user_uuid == control){
                            check = false;
                            target_x = user_x;
                            target_y = user_y;
                            alarm[1] = room_speed;
                        }
                    }
                    
                    if(check){
                        var ins = instance_create(user_x, user_y, obj_client);
                        ins.control = user_uuid;
                    }
                }
            break;
            
            //Space changed check
            case NN.insig_user_space:
                space = message_body;
                
                with(obj_client)
                {
                    if(control == other.login_uuid)
                    {
                        x = xstart;
                        y = ystart;
                    }else{
                        instance_destroy();
                    }
                }
            break;
            
            //Map load
            case NN.insig_user_map:
                var json_data = json_decode(message_body);
                
                map = ds_map_find_value(json_data, "map");
                width = ds_map_find_value(json_data, "width");
                height = ds_map_find_value(json_data, "height");
                
                //with(obj_tiles){instance_destroy()}
                
                
                ds_map_destroy(json_data);
            break
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send login request message to server

login_name = login_as;

//Construct message
var json_data = ds_map_create();
ds_map_add(json_data, "id", NN.outsig_login);
ds_map_add(json_data, "msg", login_as);
var body = json_encode(json_data);
ds_map_destroy(json_data);

//Send message
nn_send_message(body);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw ping
if(my_ping - ping &gt; 0)
{
    draw_set_color(c_white)
    draw_set_font(fnt_text)
    draw_set_halign(fa_left)
    draw_set_valign(fa_top)
    draw_set_alpha(0.5)
    draw_text(5, 5, "ping " + string(my_ping - ping) + "#space " + string(space))
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Paint
var status = nn_status();
if (status != NN.status_connected) {
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(fnt_text);
    draw_set_color(c_white);
    if (status == NN.status_disconnected) {
        draw_text(room_width/2, room_height/2, "Re connecting");
        if (!active) {
            active = true;
            alarm[1] = 1; //Connect attempt
        }
    }
    else if (status == NN.status_connecting) {
        draw_text(room_width/2, room_height/2, "Connecting...");
    }
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map draw
for(i = 0; i &lt; height; i++)
{
    for(j = 1; j &lt;= width; j++)
    {
        if(string_char_at(map, i*width + j) == "1")
        {
            draw_sprite(spr_tiles, 0, (j-1)*64, i*64);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Retry on a failed connection
if (!active) {
    event_user(15); //Connect attempt
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
