<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>message_current = 0;
timer = 0;
cutoff = 0;

t = 0;
amplitude = 2;
freq = 2;

done = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw box
draw_set_colour(c_white)
draw_rectangle(view_xview[0] + 16,view_yview[0] + 280,view_xview[0] + 800-16,view_yview[0] + 440, false)
draw_set_colour(c_black)
draw_rectangle(view_xview[0] + 19,view_yview[0] + 283,view_xview[0] + 800-19,view_yview[0] + 437, false)
//

draw_set_colour(c_white);
draw_set_alpha(1);
t++;
//How many messages are in the array
message_end = array_length_1d(message);

if (message_end &gt; 0)
{
    //Variables
    var lineEnd = 30;
    var line = 0;
    var space = 0;
    var i = 1
    var delay = 3;
    
    //Text Position
    var tY = view_yview[0] + 295;
    if (portrait == "none") var tX = view_xview[0] + 30;
    else var tX = view_xview[0] + 30 + 150;
    
    //Next Message
    if (keyboard_check_pressed(vk_enter))
    {
        //If we still have some more messages, go to the next one
        if (message_current &lt; message_end-1)
        {
            message_current++;
            cutoff =0;
        }
        //if we don't, we are done
        else
        {
            done = true;
        }
    }
    
    //Typewriter
    if (cutoff &lt; string_length(message[message_current]))
    {
        if (timer &gt;= delay)
        {
            cutoff++;
            timer = 0;
        }
        else timer++;
    }
    
    //Draw_text
    while(i &lt;= string_length(message[message_current]) &amp;&amp; i &lt;= cutoff)
    {
        //check for modifier
        if (string_char_at(message[message_current], i) == "\")
        {
            modifier = real(string_char_at(message[message_current], ++i));
            ++i;
        }
        
        //go to next line
        var length = 0;
        while (string_char_at(message[message_current], i) != " " &amp;&amp; i &lt;= string_length(message[message_current]))
        {
            i++;
            length++;
        }
        
        if (space+length &gt; lineEnd)
        {
         space = 0;
         line++;
        }
        i -= length;
        
        //Text
        draw_set_font(fnt_inventory);
        show_debug_message(string_copy(remove_modifier(message[message_current]) ,1,space))
        switch(modifier)
        {
            case 0: //normal
            {
                draw_set_colour(c_white);
                draw_text(tX+string_width(string_copy(remove_modifier(message[message_current]) ,1,space)), tY+(22*line), string_char_at(message[message_current], i));
                break;
            }
            case 1: //shaky
            {
                draw_set_colour(c_white);
                draw_text(tX+string_width(string_copy(remove_modifier(message[message_current]) ,1,space))+random_range(-1, 1), tY+(22*line)+random_range(-1, 1), string_char_at(message[message_current], i));
                break;
            }
            case 2: //rotating
            {
                var so = t + i;
                var shiftc = cos(so*pi*freq/room_speed)*amplitude;
                var shifts = sin(so*pi*freq/room_speed)*amplitude;
                draw_set_colour(c_white);
                draw_text(tX+string_width(string_copy(remove_modifier(message[message_current]) ,1,space))+shiftc, tY+(22*line)+shifts, string_char_at(message[message_current], i));
                break;
            }
            case 3: //wave
            {
                var so = t + i;
                var shiftc = cos(so*pi*freq/room_speed)*amplitude;
                var shifts = sin(so*pi*freq/room_speed)*amplitude;
                draw_set_colour(c_white);
                draw_text(tX+string_width(string_copy(remove_modifier(message[message_current]) ,1,space))+shiftc, tY+(22*line)+shifts, string_char_at(message[message_current], i));
                break;
            }
            case 4: //color shift
            {
                var col = make_colour_hsv(t+i, 255, 255);
                var col2 = make_colour_hsv(t+i+75, 255, 255);
                draw_text_transformed_colour(tX+string_width(string_copy(remove_modifier(message[message_current]) ,1,space)), tY+(22*line), string_char_at(message[message_current], i), 1, 1, 0, col, col, col2, col2, 1);
                break;
            }

        }
        
        
        space++;
        i++;
    }

    //Draw Portrait
    switch(portrait)
    {
        case "none":
        {
            break;
        }
        case "player":
        {
            //draw_sprite(spr_portrait, 0, 5, view_hview[0]-55);
            break;
        }
        case "creater":
        {
            draw_sprite(Creater, 0, view_xview[0] + 21 + 75, view_hview[0]-75 - 15);
            break;
        }
    }
}
if (done) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
